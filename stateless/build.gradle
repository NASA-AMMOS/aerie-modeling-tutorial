import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'java'
  id 'io.github.goooler.shadow' version '8.1.7'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// The runtime environment this JAR will be deployed to doesn't know what this model depends on.
// So the generated JAR must include its dependencies. (Except `merlin-sdk`, which is marked `compileTimeApi` by
// `merlin-framework`, so that the runtime system and model JAR can agree on the same interfaces.)
//jar {
//  from {
//    configurations.runtimeClasspath.filter{ it.exists() }.collect{ it.isDirectory() ? it : zipTree(it) }
//  } {
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//  }
//}

tasks.named('test') {
  useJUnitPlatform()
}

dependencies {
  implementation project(":missionmodel")
  implementation project(":scheduling")

  annotationProcessor 'gov.nasa.jpl.aerie:merlin-framework-processor:' + project.aerieVersion
  implementation "gov.nasa.ammos.aerie.procedural:scheduling:" + project.aerieVersion
  implementation "gov.nasa.ammos.aerie.procedural:timeline:" + project.aerieVersion
  implementation "gov.nasa.ammos.aerie.procedural:constraints:" + project.aerieVersion
  implementation "gov.nasa.ammos.aerie.procedural:utils:" + project.aerieVersion

  implementation 'gov.nasa.jpl.aerie:contrib:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:merlin-framework:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:merlin-sdk:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:merlin-driver:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:parsing-utilities:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:type-utils:' + project.aerieVersion
  implementation 'gov.nasa.jpl.aerie:orchestration-utils:' + project.aerieVersion
  implementation 'com.google.code.gson:gson:+'

  testImplementation 'gov.nasa.jpl.aerie:merlin-framework-junit:' + project.aerieVersion
  testImplementation 'org.junit.jupiter:junit-jupiter:+'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  implementation files("src/main/resources/jplTime-2022-08.jar")
  testImplementation files("src/main/resources/jplTime-2022-08.jar")
}
